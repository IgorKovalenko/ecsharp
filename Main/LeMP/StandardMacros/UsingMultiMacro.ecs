using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loyc;             // For Symbol
using Loyc.Collections; // For VList<LNode>
using Loyc.Syntax;      // For LNode
using Loyc.Ecs;         // For EcsLanguageService

namespace LeMP
{
	partial class StandardMacros
	{
		[LexicalMacro("using (System, System.(Collections.Generic, Linq, Text));", 
			"Generates multiple using-statements from a single one.", 
			"#import", Mode = MacroMode.Passive | MacroMode.Normal)]
		public static LNode UsingMulti(LNode stmt, IMacroContext context)
		{
			matchCode (stmt) {
			case { using $multiNamespace; }:
				try {
					var list = GetNamespaces(stmt[0]);
					if (list == null)
						return null;
					return quote(#splice(
						$(.. list.Select(namespc => quote { using $namespc; }))
					));
				} catch (NotSupportedException) {
					context.Write(Severity.Note, stmt, 
						"Multi-using statement seems malformed. Correct example: `using (System, System.(Text, Linq));`");
				}
			}
			return null;
		}

		static IEnumerable<LNode> GetNamespaces(LNode multiName) {
			matchCode(multiName) {
				case ($(..tupleArgs),): // a tuple
					return tupleArgs.SelectMany(expr => 
						GetNamespaces(expr) ?? Range.Single(expr));
				case $outerNamespace.($(..tupleArgs),): // dot operator ending in a tuple
					return tupleArgs.SelectMany(arg =>
						(GetNamespaces(arg) ?? Range.Single(arg)).Select(subNS => 
							MergeIdentifiers(outerNamespace, subNS)));
				default:
					return null;
			}
		}
		static LNode MergeIdentifiers(LNode left, LNode right)
		{
			// '.' is a binary operator, so we can't directly merge dotted identifiers.
			// Given e.g. System.(Collections.Generic,), we'll use recursion to go from 
			//   System => System.Collections => System.Collections.Generic
			if (right.IsId) {
				if (right.Name.Name == "" || right.Name.Name == "#")
					return left;
				else
					return quote($left.$right);
			} else {
				matchCode (right) {
					case $right1.$right2:
						return MergeIdentifiers(quote($left.$right1), right2);
					default:
						throw new NotSupportedException();
				}
			}
		}
	}
}
