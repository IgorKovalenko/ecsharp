2013-Jun-15 (SVN r343)
- LES syntax changes:
                               Before              After
  Symbols                      \a-b OR \`{\n}`     @@a-b OR @@`{\n}`
  Fancy Identifier             \\a-b OR \\`{\n}`   @a-b OR @`{\n}`
  Operator with arbitrary text `a-b`               \a-b OR \`{\n}`
  Suffix operators             ++, --, ...$        ++, --, ...$, \\suffix
- Fixed errors in collection tests left by recent design changes (e.g. elimination of IIterable)
- LesLexer and TokensToTree unit tests largely work now

2013-Jun-3 (SVN r337)
- Defined the .NET 4.5 interfaces IReadOnlyCollection<T>, IReadOnlyList<T> and IReadOnlyDictionary<T> in Loyc.Essentials (#if !DotNet45)
- Removed ISource<T> and replaced it with IReadOnlyCollection<T>
- I had to remove ICount as base interface from some places. Because IReadOnlyCollection<T> does not include ICount, the compiler complains a lot about "Ambiguity between IReadOnlyCollection(T).Count and ICount.Count"

2013-Jun-2 (SVR r335)
- Added "Range" interfaces representing forward ranges, bidirectional ranges, random-access ranges and mutable variants of all of these.
- Added "IBinumerator<T>", "IMEnumerator<T>", and "IMBinumerator<T>" interfaces for enumerators that allow mutation of the current item and/or that enumerate backward.
- Removed "Iterator<T>" and "IIterable<T>" because they do not provide a good enough value proposition.
- Added a new project "Loyc.Collections" and transferred ALists, VLists, and Sets (Set/MSet/Map/MMap) to this library. Loyc.Essentials will still contain all collection interfaces, small collection classes (DList, InternalList),  small base classes and extension methods.

2013-May-28 (SVN r322)
- LLLPG: simple syntactic predicates didn't backtrack; fixed
- EcsNodePrinter: Fixed the "dangling else" ambiguity
- BaseLexer: added TryMatch methods

2013-May-27 (SVN r321)
- Major code reorganization. LLLPG moved to new project, LNode hierarchy moved to new Loyc.Syntax project.
- Lots of abandoned code deleted
- LLLPG: Added support for simple syntactic predicates (only works with rules that take no arguments)

2013-May-21 (SVN r308)
- Changed EC# lexer to use enum TokenType in place of Symbol-based TokenType (for performance; only enums support switch()); added separate token types for each operator.
LLLPG:
- Renamed code snippet gen classes
- Replaced PGCodeGenForSymbolStream with GeneralCodeGenHelper, which supports any kind of token including Symbols.
- Eliminated PGSets.cs (replaced with PGNodeSet in GeneralCodeGenHelper.cs)

2013-May-20 (SVN r306,r307)
LLLPG:
- Implemented PrematchAnalysisVisitor. Converts Match() calls to Skip() and suppresses redundant Check()s
- Split out several internal data structures into PredictionTree.cs and KthSet.cs
- Consume() renamed to Skip() or MatchAny(), the latter being used when there is a ResultSaver (e.g. digit:='0'..'9')

2013-May-19 (SVN r303)
- Bug fix: StdStriviaNode.Equals/GetHashCode now pays attention to Value (without which, LLLPG believed all #rawText and-predicates were equal)
LLLPG:
- Updated documentation on LLParserGenerator.GenerateCode. Now generates a simple block {} instead of a class so that caller can choose the class declaration.
- Bug fix: LLLPG couldn't handle an empty gate LHS (empty Seq) and it thought that a gate '=>' couldn't be followed by EOF. New test: SimpleGateTest()
- Bug fix: changed how alts are counted to ensure that a 'goto matchN' is not used when the final prediction tree only uses the match once (GenerateCodeVisitor 'timesUsed')
- Bug fix: fixed crashes caused by less common usages of and-predicates &{...}
- Feature fix (a new feature that a user would perceive as a bug fix): enhanced handling of and-predicates so that prediction trees can join them with '||', e.g. (&{a} || &{b}) => if (a || b) { ... }.
- Feature fix: added Full LL(k) parsing mode (controlled by FullLLk flag), documented FullLLk flag. It sometimes rearranges the prediction tree in a way that SimplifyPredictionTree can't simplify, plus it might be too slow in some grammars, so it's disabled by default.
- Bug fix: LLLPG no longer gives "ambiguity with exit" warnings on "token" rules that are used within other rules.
- Bug fix: fixed LLLPG 'forgetting' that it is generating a char parser when a char PGIntSet is combined with a trivial non-charset such as ~(-1). (changed IntSet.New() etc.)
- Bug fix: changing Alts.DefaultArm no longer changes the behavior of the generated code by  decreasing the priority of the marked arm (fixing this without affecting nongreedy(...)* loops involved the new field KthSet.IsNongreedyExit.) New test: DifferentDefault2()
- Yuck fix: LLLPG now reports 0 instead of 2147483647 as an example of the set "~()"
- Eliminated Set<T> wrapper around HashSet<T>, now using my new Set<T>/MSet<T> data structures