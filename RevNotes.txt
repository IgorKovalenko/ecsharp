2013-Oct-14 (SVN r410)
- EC# lexer rewritten in LES! Major refactoring too; EcsLexer.cs largely rewritten. TokenType enum rewritten based on TokenKind; some operators merged into single token types (e.g. Mul, Div, Mod => MulDiv).
- EC# lexer now supports dot-indents and LES-style triple-quoted strings.
- Some refactoring of LES lexer too
- Escapes in TQStrings are now like \n/ or \"/ instead of \\n and \\".
- LLLPG is now used to parse C# keywords. LLLPG uses nearly 2500 lines of code to do this (from 120 lines of input), but it's easier than postprocessing and the code will probably run faster.
- G.TryParseInt, G.TryParseUInt, G.SkipSpaces, G.TryParseHex rewritten based on UString. Added G.Base36DigitValue.
- Hex floats now implemented! I finally got tired of the unit test errors for them, and wrote a parser that actually handles floats in base 2, 4, 8, 10, 16 and 32. Parsing isn't perfect (often off by one ULP compared with C#). Core implementation, documentation, and unit tests in G (G.TryParseFloatParts, G.TryParseDouble, G.TryParseFloat). Support for prefixes (0x, 0b) and suffixes (F, D, M) is implemented separately in the lexer of each programming language.
- Bug fix: EcsNodePrinter.DropNonDeclarationAttributes used to drop ref/out at call sites and attributes on constructors.
- LLLPG: Now avoids producing unreachable "break" statements in switch cases, using heuristics (CodeGenHelperBase.EndMayBeReachable())
- LLLPG: fixed a small bug in prematch analysis and a NullReferenceException in PGTerminalSet.SlowEquals.
- LLLPG: lexer now supports EOF as a terminal if used explicitly (-1 does NOT work, it is treated like an empty set.)
- LLLPG: syntactic predicates had a design flaw! Turns out, we actually need two separate methods for recognizers, not one. The recognizer itself is now named Scan_* and there is a second method Try_Scan_* which implements backtracking. Previously there was only one method which always backtracked, but it does not make sense to backtrack when calling a rule inside a recognizer (unless the recognizer itself uses a syntactic predicate). Also, Try_Scan_* needs an extra argument for the lookahead amount, since scanning should not always start at the current input position.
- # (formerly known as the list operator) will now be used only for lists of executable statements, in which the final value is the result. Tuples will now be used instead of # for argument and base class lists in #def, #class, #struct, etc.

2013-Oct-07
- Published LLLPG article: http://www.codeproject.com/Articles/664785/A-New-Parser-Generator-for-Csharp

2013-Oct-07 (SVN r407-409)
- Removed last traces of Loyc.Essentials namespace
- EC# printer / LNode: parenthesis are now represented by #trivia_inParens, not by a call to GSymbol.Empty.
- EC# printer: AllowChangeParenthesis (formerly AllowExtraParenthesis) is now true by default
- EC# printer: fixed an assert in 'new' operator
- LES parser now adds #trivia_inParens for expr in parens

2013-Oct-04 (SVN r406)
- LLLPG: LLLPG LES input bootstrapped! LLLPG can produce parsers using "LLLPG.exe GrammarFile.les", and has been compiled using a parser that was produced this way (LesParserGenerated.les). Lexer not yet bootstrapped.
- LLLPG: Added LLLPG binaries to Lib\LLLPG (will be used to compile LES files during project build)
- LLLPG: Syntax of options in "LLLPG parser(options) {...}" changed
- MacroProcessor: Added #unimportMacros(namespace) command

2013-Oct-03 (SVN r405)
- LLLPG: Added proper support for user-defined error branch
- LLLPG: Rewrote the code for merging Alts/Preds together (cleaner, less bugs)
- LLLPG: Changed recognizer representation (a recognizer now has a separate Rule object)
- LLLPG: Added [recognizer { ... }] attribute for selecting the method signature of the recognizer version of a rule
- LLLPG: Now uses IMessageSink for output
- MacroProcessor: Added support for MacroMode enum (e.g. used by LLLPG to run child macros first)
- MacroProcessor: Tweaked message output rules
- Renamed IHasAdd->IAdd
- New class MessageSinkFromDelegate
- Misc fixes

2013-Sep-30 (SVN r404)
- LLLPG command-line tool is very nearly done, with micro-LEL as the input language.
- Various misc bug fixes
- Lots of new "end-to-end" tests in LlpgParserTests, which test the whole pipeline from input string to output string
- Soon I'll probably rename micro-LEL to something else (LeMP?)
- Added FVList.Last(count), RVList.First(count)
- MessageSinks.cs: added SeverityMessageFilter

2013-Sep-27 (SVN r403)
- Implemented MacroProcessor and its wrapper, Compiler, which includes a command-line interface. Also, simple unit tests.
- Added documentation parameters to SimpleMacroAttribute
- Added descriptions of all prelude macros
- Added BMultiMap.Keys property
- Loyc.Collections.dll: Added Bijection class

2013-Sep-23 (SVN r402)
- Macro processor in progress, including per-source-file parallel execution
- Added ThreadEx.PropagateVariables for propagating TLVs manually in a thread that was not created via ThreadEx. TODO: research Task schedulers, see if we can somehow use ThreadEx with Tasks automatically.
- Renamed ILanguageService to IParsingService (although it still has a Printer property) so that it makes sense that LNode.Printer can be independent of ParsingService.Current, i.e. the active printing service can be different from the active parsing service.

2013-Sep-22 (SVN r401)
- LLLPG: Implemented the LLLPG StageTwoParser & unit tested
- LLLPG: For consistency, renamed SnippetGenerator=>CodeGenHelper and CSG=>CGH. Also, ILexer.Source=>ILexer.File

2013-Sep-21 (SVN r400)
- LLLPG StageOneParser now works properly; this required a couple extra hacks in LES parser. It's getting messy so I'll have to write a dedicated LLLPG parser eventually, so I can remove the hacks.
- Mostly fixed an obscure bug in LLParserGenerator.ComputeNext (see comment in LLParserGenerator.cs about infinite loops)
- Added option to start EzStopwatch in constructor, or to pause SimpleTimer in constructor

2013-Sep-18 (SVN r394)
- Introduced ILanguageService (later renamed IParsingService) and LesLanguageService

2013-Sep-18 (SVN r394)
- Renamed #int to #int32, #long to #int64, etc.
- Started work on LLLPG macro. The plan: make some minor modifications to the LES parser so I can trick it into parsing LLLPG code in a derived class.

2013-Sep-16 (SVN r393)
- do renamed to #doWhile
- Added InsertRange extension method for IList
- Added MessageSink.PushCurrent()
- Rewrote most of the command-line argument processor, UG.ProcessCommandLineArguments, its documentation and unit tests
- Finished most of the basic LEL macros (e.g. var, prop, while, switch, try-catch), mapping them to C#

2013-Sep-15 (SVN r392)
- Introduced IListAndListSource to resolve ambiguity errors resolving extension methods
- Starting work on LEL.Prelude

2013-Sep-08 (SVN r389)
- MathEx: added IsPrime(n)
- BoundingBox.Inflate was buggy, fixed.
- LineMath.SimplifyPolyline sometimes duplicated output points, fixed.
- Baadia: Added clipboard support and Duplicate (Ctrl+D) command. Text associated with selected shapes is also copied as plain text. When pasting plain text, it will be pasted into the last-clicked shape if it is selected, otherwise a new shape is created.
- Baadia: Ctrl+Delete clears the text of the selected shape(s).
- Baadia: You can now drag down and right to perform a multi-select operation, no need to hold Ctrl or anything.
- Baadia: Added support for moving line strings / arrows
- Baadia: Added support for moving several selected shapes at once
- Baadia: Added support for Panels. A text shape becomes a panel when you put another shape on top of it. After that you can draw lines and arrows directly on top of the panel. To move a panel, click it first before dragging. When moving a panel, all shapes on top of it move at the same time.
- Baadia: Separated "drawing Z-order" from "hit test Z-order" so that a line can still be selected when is drawn "underneath" a textbox.

2013-Sep-06 (SVN r388)
- LES: Parenthesis are no longer represented explicitly. (xy)+z is now exactly equivalent to xy+z.
- LES: After implementing 'true notation for named literals, realized that @true was already implemented; removed 'true support. How embarrassing.
- LES: Added @void literal (Loyc.@void.Value)
- LES: LesPrinterTests now pass.

2013-Sep-05 (SVN r387)
- Improved LES lexer and parser
- LES \... operator changed to ...\ to simplify precedence rules slightly
- LesPrecedence: added explanation of how an operator's Name is derived from the operator text
- 2 bug fixes in IntSet (one subtly alters LLLPG's behavior -> LLLPG test suite updated)

2013-Sep-04 (SVN r386)
- LES: improved triple-quoted string parsing, added dot-indentation (as lexer feature)

2013-Aug-26 (SVN r382)
- Baadia: added saving/loading with file format based on Protobuf-net

2013-Aug-12 (SVN r381)
- Baadia: Added LLShapeGroup to support Matrix transforms
- Baadia: You can now click blank space and type, or double-click to place a marker.

2013-Aug-01 (SVN r380)
- Baadia: split Shapes.cs into Shape.cs, Marker.cs, TextBox.cs, LineOrArrow.cs
- Baadia: you can now double-click on start or endpoint to change arrow/marker type

2013-Jul-31 (SVN r377)
- Loyc.Essentials: Added ReversedList (ReverseView() extension method)
- Loyc.Essentials: Added IHasAdd interface (later renamed IAdd<T>)
- Baadia: Can now move and resize boxes; lines move appropriately when attached boxes move

2013-Jul-27 (SVN r372-375)
Baadia: the Boxes and Arrows diagramming tool
- Baadia: added undo/redo stack
- Baadia: added simple text input for TextBox and LineOrArrow
- Baadia: infrastructure for "commands": ICommand, CommandMethod, CommandAttribute.
- Baadia: shapes can now be selected and deleted with Delete key; mouse cursor shows hit test result
- Baadia: added base class DrawingControlBase to hold the more generic mouse logic
- Baadia: erase-by-scribble and cancel-by-scribble are working now
- Added SetM.Toggle(), Set.WithToggled() and set ^ item operators.
- Added PointMath.ComputeConvexHull(), unit tests are needed

2013-Jul-11 (SVN r364)
Added ListExt.FindLowestK and ListExt.FindLowestKStable extension methods using "quickselect" algorithm
Added ListExtTests: for now just simple fuzz tests for StableSort, FindLowestK, FindLowestKStable. Fixed bug in StableSort (it wasn't stable)
Work on Baadia continues

2013-Jun-28
- Added Essentials/Geometry folder and Loyc.Geometry namespace to separate Geometry from Math code
- Added 3D points and vectors (Point3<T>, Vector3<T>)
- Added extension methods for faster math such as a.Sub(b) and a.Cross(b), specialized for (int, float, double, FPI8) with a T4 template; built-in operators on Point<T> and Vector<T> use slow IMath<T> interface.

2013-Jun-23 (SVN r351)
- Refactored Token structure to support multiple languages, made new Syntax/Lexing folder for multi-language lexing code.
- BaseParser now expects that LA0 can be converted to int; added GeneralCodeGenHelper.MatchType option for this purpose (see documentation of MatchType for more information)
- LES parser works, test suite passes!

2013-Jun-22 
- Bug fix in InvertibleSet<T>.Union + regression test
- #postInc, #postDec now called #suf++, #suf-- so that derived LES suffixes have the same pattern e.g. -**- => #suf-**-
- Added UString methods: Find, ToUpper, StartsWith, Replace, + unit tests. Find() is also an extension method on string.

2013-Jun-19 (SVN r344/345)
- Finally started C# code for LES bootstrap grammar

2013-Jun-15 (SVN r343)
- LES syntax changes:
                               Before              After
  Symbols                      \a-b OR \`{\n}`     @@a-b OR @@`{\n}`
  Fancy Identifier             \\a-b OR \\`{\n}`   @a-b OR @`{\n}`
  Operator with arbitrary text `a-b`               \a-b OR \`{\n}`
  Suffix operators             ++, --, ...$        ++, --, ...$, \\suffix
- Fixed errors in collection tests left by recent design changes (e.g. elimination of IIterable)
- LesLexer and TokensToTree unit tests largely work now

2013-Jun-3 (SVN r337)
- Defined the .NET 4.5 interfaces IReadOnlyCollection<T>, IReadOnlyList<T> and IReadOnlyDictionary<T> in Loyc.Essentials (#if !DotNet45)
- Removed ISource<T> and replaced it with IReadOnlyCollection<T>
- I had to remove ICount as base interface from some places. Because IReadOnlyCollection<T> does not include ICount, the compiler complains a lot about "Ambiguity between IReadOnlyCollection(T).Count and ICount.Count"

2013-Jun-2 (SVR r335)
- Added "Range" interfaces representing forward ranges, bidirectional ranges, random-access ranges and mutable variants of all of these.
- Added "IBinumerator<T>", "IMEnumerator<T>", and "IMBinumerator<T>" interfaces for enumerators that allow mutation of the current item and/or that enumerate backward.
- Removed "Iterator<T>" and "IIterable<T>" because they do not provide a good enough value proposition.
- Added a new project "Loyc.Collections" and transferred ALists, VLists, and Sets (Set/MSet/Map/MMap) to this library. Loyc.Essentials will still contain all collection interfaces, small collection classes (DList, InternalList),  small base classes and extension methods.

2013-May-28 (SVN r322)
- LLLPG: simple syntactic predicates didn't backtrack; fixed
- EcsNodePrinter: Fixed the "dangling else" ambiguity
- BaseLexer: added TryMatch methods

2013-May-27 (SVN r321)
- Major code reorganization. LLLPG moved to new project, LNode hierarchy moved to new Loyc.Syntax project.
- Lots of abandoned code deleted
- LLLPG: Added support for simple syntactic predicates (only works with rules that take no arguments)

2013-May-21 (SVN r308)
- Changed EC# lexer to use enum TokenType in place of Symbol-based TokenType (for performance; only enums support switch()); added separate token types for each operator.
LLLPG:
- Renamed code snippet gen classes
- Replaced PGCodeGenForSymbolStream with GeneralCodeGenHelper, which supports any kind of token including Symbols.
- Eliminated PGSets.cs (replaced with PGNodeSet in GeneralCodeGenHelper.cs)

2013-May-20 (SVN r306,r307)
LLLPG:
- Implemented PrematchAnalysisVisitor. Converts Match() calls to Skip() and suppresses redundant Check()s
- Split out several internal data structures into PredictionTree.cs and KthSet.cs
- Consume() renamed to Skip() or MatchAny(), the latter being used when there is a ResultSaver (e.g. digit:='0'..'9')

2013-May-19 (SVN r303)
- Bug fix: StdStriviaNode.Equals/GetHashCode now pays attention to Value (without which, LLLPG believed all #rawText and-predicates were equal)
LLLPG:
- Updated documentation on LLParserGenerator.GenerateCode. Now generates a simple block {} instead of a class so that caller can choose the class declaration.
- Bug fix: LLLPG couldn't handle an empty gate LHS (empty Seq) and it thought that a gate '=>' couldn't be followed by EOF. New test: SimpleGateTest()
- Bug fix: changed how alts are counted to ensure that a 'goto matchN' is not used when the final prediction tree only uses the match once (GenerateCodeVisitor 'timesUsed')
- Bug fix: fixed crashes caused by less common usages of and-predicates &{...}
- Feature fix (a new feature that a user would perceive as a bug fix): enhanced handling of and-predicates so that prediction trees can join them with '||', e.g. (&{a} || &{b}) => if (a || b) { ... }.
- Feature fix: added Full LL(k) parsing mode (controlled by FullLLk flag), documented FullLLk flag. It sometimes rearranges the prediction tree in a way that SimplifyPredictionTree can't simplify, plus it might be too slow in some grammars, so it's disabled by default.
- Bug fix: LLLPG no longer gives "ambiguity with exit" warnings on "token" rules that are used within other rules.
- Bug fix: fixed LLLPG 'forgetting' that it is generating a char parser when a char PGIntSet is combined with a trivial non-charset such as ~(-1). (changed IntSet.New() etc.)
- Bug fix: changing Alts.DefaultArm no longer changes the behavior of the generated code by  decreasing the priority of the marked arm (fixing this without affecting nongreedy(...)* loops involved the new field KthSet.IsNongreedyExit.) New test: DifferentDefault2()
- Yuck fix: LLLPG now reports 0 instead of 2147483647 as an example of the set "~()"
- Eliminated Set<T> wrapper around HashSet<T>, now using my new Set<T>/MSet<T> data structures