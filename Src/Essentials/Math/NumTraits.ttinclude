<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#+
	class Traits {
		public Traits(string qName, string csName, string abbrev, string interfaces, bool isFloat, bool isInt, bool isSigned, int sigBits, int wholeBits)
		{
			QualifiedName = qName;
			CSharpName = csName ?? qName;
			Abbrev = abbrev;
			MathType = "Math" + abbrev;
			Interfaces = interfaces;
			IsSigned = isSigned;
			IsFloat = isFloat;
			IsInt = isInt;
			SignificantBits = sigBits;
			WholeBits = wholeBits;
			IsFixed = wholeBits < sigBits;
		}
		public string QualifiedName; // "System.Int32"
		public string CSharpName;    // "int"
		public string Abbrev;        // "I"
		public string MathType;      // "MathI"
		public string Interfaces;    // "IIntMath<int>"
		public string Epsilon { get { return IsInt ? "1" : "T.Epsilon"; } }
		public string PositiveInfinity { get { return IsFloat ? "T.PositiveInfinity" : "T.MaxValue"; } }
		public string ReturnNegativeInfinity { get { return IsFloat ? "return T.NegativeInfinity" : IsSigned ? "return T.MinValue" : "throw new NotSupportedException()"; } }
		public string ReturnNaN  { get { return IsFloat ? "return T.NaN" : "throw new NotSupportedException()"; } }
		public string IsInfinity { get { return IsFloat ? "T.IsInfinity(value)" : "false"; } }
		public string IsNaN      { get { return IsFloat ? "T.IsNaN(value)" : "false"; } }
		public bool IsFloat;
		public bool IsInt;
		public bool IsSigned;
		public bool IsFixed;
		public int SignificantBits;
		public int WholeBits; // the MaxIntPowerOf2 trait
		public string Zero() { return IsFixed ? CSharpName + ".Zero" : "("+CSharpName+")0"; }
		public string One() { return IsFixed ? CSharpName + ".One" : "("+CSharpName+")1"; }
		public string Abs() { return !IsSigned ? "a" : "(T)(a >= Zero ? a : -a)"; }
		public string MaxInt() { return WholeBits > 64 ? "ulong.MaxValue" : "(ulong)" + QualifiedName + ".MaxValue"; }
		public string MinInt() { return WholeBits > 63 && IsSigned ? "long.MinValue" : "(long)" + QualifiedName + ".MinValue"; } 
		public string ShiftLeft() { return ShiftLeft("a", "amount"); }
		public string ShiftRight() { return ShiftRight("a", "amount"); }
		public string ShiftLeft(string a, string amt) { return string.Format(IsFloat ? "MathEx.ShiftLeft({0}, {1})" : "(T)({0} << {1})", a, amt); } 
		public string ShiftRight(string a, string amt) { return string.Format(IsFloat ? "MathEx.ShiftRight({0}, {1})" : "(T)({0} >> {1})", a, amt); } 
		public string CountOnes() { return IsFixed ? "a.CountOnes()" : "MathEx.CountOnes(a)"; }
		public string Log2Floor() { return IsFixed ? "a.Log2Floor()" : "MathEx.Log2Floor(a)"; }
		public string Sqrt() { return Sqrt("a"); }
		public string Sqrt(string a) { return string.Format(IsFloat ? "(T)Math.Sqrt({0})" : IsInt ? "(T)MathEx.Sqrt({0})" : "{0}.Sqrt()", a); }
		public string MulDiv(string a, string mulBy, string divBy) {
			if (IsFloat || SignificantBits <= 16)
				return string.Format("({0} * {1} / {2})", a, mulBy, divBy);
			else if (IsInt)
				return string.Format("MathEx.MulDiv({0}, {1}, {2})", a, mulBy, divBy);
			else
				return string.Format("{0}.MulDiv({1}, {2})", a, mulBy, divBy);
		}
		public override string ToString() { return CSharpName; }
	};

	static Traits[] _traits = new Traits[] {
		new Traits("System.SByte",  "sbyte",  "I8",  "IIntMath<sbyte>",    false, true, true, 7,7),
		new Traits("System.Byte",   "byte",   "U8",  "IUIntMath<byte>",    false, true, false, 8,8),
		new Traits("System.Int16",  "short",  "I16", "IIntMath<short>",    false, true, true, 15,15),
		new Traits("System.UInt16", "ushort", "U16", "IUIntMath<ushort>",  false, true, false, 16,16),
		new Traits("System.Int32",  "int",    "I",   "IIntMath<int>",      false, true, true, 31,31),
		new Traits("System.UInt32", "uint",   "U",   "IUIntMath<uint>",    false, true, false, 32,32),
		new Traits("System.Int64",  "long",   "L",   "IIntMath<long>",     false, true, true, 63,63),
		new Traits("System.UInt64", "ulong",  "UL",  "IUIntMath<ulong>",   false, true, false, 64,64),
		new Traits("System.Single", "float",  "F",   "IFloatMath<float>",  true, false, true, 24,128),
		new Traits("System.Double", "double", "D",   "IFloatMath<double>", true, false, true, 53,1024),
		new Traits("FPI8",          null,     "F8",  "IRationalMath<T>, IBinaryMath<T>", false, false, true, 31, 23),
		new Traits("FPI16",         null,     "F16", "IRationalMath<T>, IBinaryMath<T>", false, false, true, 31, 23),
		new Traits("FPI23",         null,     "F23", "IRationalMath<T>, IBinaryMath<T>", false, false, true, 31, 23),
		new Traits("FPL16",         null,    "FL16", "IRationalMath<T>, IBinaryMath<T>", false, false, true, 63, 47),
		new Traits("FPL32",         null,    "FL32", "IRationalMath<T>, IBinaryMath<T>", false, false, true, 63, 31),
	};
#>