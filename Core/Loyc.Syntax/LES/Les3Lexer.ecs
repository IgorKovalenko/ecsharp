#ecs;
#importMacros(Loyc.LLPG);
using System(, .Text, .Linq, .Collections.Generic, .Diagnostics);
using Loyc;               // optional (for IMessageSink, Symbol, etc.)
using Loyc.Collections;   // optional (many handy interfaces & classes)
using Loyc.Syntax.Lexing; // For BaseLexer

namespace Loyc.Syntax.Les; // braces around the rest of the file are optional

using TT = TokenType; // Abbreviate TokenType as TT
using P = LesPrecedence;
using S = CodeSymbols;

public partial class Les3Lexer
{
	[FullLLk, PrematchByDefault]
	LLLPG (lexer) @{
	// `@{` invokes LLLPG in ANTLR-style syntax mode, but there are several 
	// differences; see http://ecsharp.net/lllpg/lllpg-in-antlr-style.html

	// Whitespace & comments -------------------------------------------------

	extern token Spaces : (' '|'\t')+;
	token DotIndent : ( '.' ('\t'|' '+) )*;

	token Newline[bool ignoreIndent = false] returns [object result] :
		( '\r' '\n'? | '\n' )
		{AfterNewline(ignoreIndent, skipIndent: false);}
		// Tokens with WhitespaceTag are filtered out by WhitepaceFilter.
		// We want to filter out newlines inside parentheses and square brackets.
		{return _brackStack.Last == TokenType.LBrace ? null : WhitespaceTag.Value;};
	token SLComment returns [object result] :
		"//" nongreedy(_)* (@"\\" | ('\r'|'\n'|EOF) =>)
		{return WhitespaceTag.Value;};
	[LL(3)] token MLComment returns [object result] :
		"/*" nongreedy(MLComment / Newline(true) / _)* "*/"
		{return WhitespaceTag.Value;};
		
	// Numbers ---------------------------------------------------------------
	
	token Number returns [object result] :
		('-' {_isNegative = true;} / {_isNegative = false;})
		(HexNumber / BinNumber / DecNumber)
		{UString numberText = Text();}
		(	{_startPosition = InputPosition;} // as expected by IdCore
			{object boolOrNull = NoValue.Value;}
			suffix:IdCore[ref boolOrNull]
			{PrintErrorIfTypeMarkerIsKeywordLiteral(boolOrNull);}
		)?
		{
			_type = _isNegative ? TT.NegativeLiteral : TT.Literal;
			return ParseLiteral2(suffix, numberText, true);
		};

	DecDigits : '0'..'9'+ greedy(('_'|'\'') '0'..'9'+)* greedy('_')? ;
	[inline] HexDigit  : '0'..'9' | 'a'..'f' | 'A'..'F' ;
	HexDigits : greedy(HexDigit)+ greedy(('_'|'\'') greedy(HexDigit)+)* greedy('_')? ;
	
	// _isFloat, _numberBase are no longer used
	DecNumber :
		{_numberBase=10;}
		(DecDigits | '.' DecDigits =>)
		( {_isFloat=true;} '.' DecDigits )?
		greedy( {_isFloat=true;} ('e'|'E') ('+'|'-')? DecDigits )?
		;
	HexNumber :
		'0' ('x'|'X') {_numberBase=16;}
		(HexDigits | '.' HexDigits =>)
		// Avoid ambiguity with 0x5.Equals(): a dot is not enough
		(	'.' ('0'..'9' => () / &( HexDigits ('p'|'P') ('+'|'-'|'0'..'9') ))
			{_isFloat=true;} HexDigits )?
		greedy( {_isFloat=true;} ('p'|'P') ('+'|'-')? DecDigits )?
		;
	BinNumber :
		'0' ('b'|'B') {_numberBase=2;}
		(DecDigits | '.' DecDigits =>)
		( {_isFloat=true;} '.' DecDigits )?
		greedy( {_isFloat=true;} ('p'|'P') ('+'|'-')? DecDigits )?
		;
	
	// Used by NumberSuffix to detect end-of-suffix
	[inline] extern token EndId : (~('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'#') | EOF) =>;

	// Strings ---------------------------------------------------------------
		
	token SQString returns [object result] :
		{_parseNeeded = false;}
		'\'' ('\\' _ {_parseNeeded = true;} | ~('\''|'\\'|'\r'|'\n')) '\'' 
		{return ParseSQStringValue();};
	
	token DQString returns [object result] :
		{_parseNeeded = false;}
		(	'"' [ '\\' _ {_parseNeeded = true;} | ~('"'|'\\'|'\r'|'\n') ]* 
			('"' / {_parseNeeded = true;}) )
		{return ParseStringValue(isTripleQuoted: false);};
	
	[LL(4)] token TQString returns [object result] :
		{_parseNeeded = true;}
		{_style = NodeStyle.TDQStringLiteral;}
		(	'"' '"' '"' nongreedy(Newline(true) / _)* '"' '"' '"' 
		| {_style = NodeStyle.TQStringLiteral;}
			"'''"       nongreedy(Newline(true) / _)* "'''" )
		{return ParseStringValue(isTripleQuoted: true, les3TQIndents: true);};

	BQString :
		{_parseNeeded = false;}
		'`' ('\\' _ {_parseNeeded = true;} | ~('`'|'\\'|'\r'|'\n'))* '`';

	// Nontrivial punctuation & operators -----------------------------------
		
	[inline] extern token OpChar :
		'~'|'!'|'%'|'^'|'&'|'*'|'-'|'+'|'='|'|'|'<'|'>'|'/'|'?'|':'|'.';
	token Operator returns [object result] : 
		('$'|OpChar) OpChar* 
		{$result = ParseNormalOp();}
		{if ($result == @@`':`) _type = TT.Colon;};
	token SQOperator returns [object result] : 
		"'" LettersOrPunc* 
		// Note: SQString has higher priority in the grammar; this rule is not called if it's a proper character
		("'" {
			_type = TT.Unknown;
			ErrorSink.Write(Severity.Error, IndexToPositionObject(InputPosition-1), "Expected exactly one character inside quotes");
		})?
		{var t = _type; ParseNormalOp(); _type = t; return _value;};

	// Identifiers, keywords and named literals --------------------------------

	token Keyword returns [object result] :
		'.'
		// Check that the character before '.' is not an identifier character;
		// LLLPG makes faster code in NextToken if we delay the check until after '.'
		&{[Hoist] InputPosition < 2-$LI || !Try_ScanIdContChar($LI-2)}
		IdStartChar+
		{return (Symbol) Text();};

	token Id returns [object result] :
		{object boolOrNull = NoValue.Value;}
		idtext:IdCore[ref boolOrNull]
		(	{saveAndRestore(_startPosition); _startPosition = InputPosition;}
			(value:TQString / value:DQString)
			{
				_type = TT.Literal;
				PrintErrorIfTypeMarkerIsKeywordLiteral(boolOrNull);
				return _value = ParseLiteral2(idtext, value.ToString(), false);
			}
		)?
		{return boolOrNull != NoValue.Value ? boolOrNull : IdToSymbol(idtext);};

	// LES3 might not officially treat # as an identifier character, but it's handy for now
	[inline] extern token IdStartChar : '_'|'a'..'z'|'A'..'Z'|'#';
	[recognizer { bool ScanIdContChar(); }]
	token IdContChar : IdStartChar | '0'..'9' | '\'' &!("''");

	NormalId : IdStartChar greedy(IdContChar)*;

	token IdCore[ref object boolOrNull] returns [UString result] :
		( BQString {$result = ParseStringCore(false);}
		| NormalId {
			$result = Text();
			if ($result == "true")  { _type = TT.Literal; boolOrNull = G.BoxedTrue; }
			if ($result == "false") { _type = TT.Literal; boolOrNull = G.BoxedFalse; }
			if ($result == "null")  { _type = TT.Literal; boolOrNull = null; }
		  }
		);

	token LettersOrPunc : '0'..'9'|'a'..'z'|'A'..'Z'|'_'|'#'
		|'~'|'!'|'%'|'^'|'&'|'*'|'-'|'+'|'='|'|'|'<'|'>'|'/'|'?'|':'|'.'|'$' ;

	token SpecialLiteral returns [object result] :
		"@@" LettersOrPunc+ {return ParseAtAtLiteral(Text());};

	// Shebang (optional feature) --------------------------------------------

	token Shebang returns [object result] : 
		&{InputPosition == 0} "#!" ~('\r'|'\n')* Newline? 
		{return WhitespaceTag.Value;};

	// Token -----------------------------------------------------------------

	[LL(4)] public override token NextToken returns [Maybe<Token> result] :
		( Spaces / &{InputPosition == _lineStartAt} '.' (' '|'\t') => DotIndent )?
		{
			_startPosition = InputPosition;
			_style = 0;
			if (LA0 == -1) { // EOF
				return NoValue.Value;
			}
		}
		( {_type = TT.Shebang;}    value:Shebang
		/ {_type = TT.Literal;}    value:SpecialLiteral
		/ {_type = TT.BQId;}       ('`' => value:Id)
		/ {_type = TT.Id;}         value:Id
		/ {_type = TT.Newline;}    value:Newline
		/ {_type = TT.SLComment;}  value:SLComment
		/ {_type = TT.MLComment;}  value:MLComment
		/ {_type = TT.Literal;}    value:Number
		/ {_type = TT.Literal;}    value:TQString
		/ {_type = TT.Literal;}    value:DQString
		/ {_type = TT.Literal;}    value:SQString
		/ {_type = TT.SingleQuoteOp;} value:SQOperator
		/ {_type = TT.Comma;}      ',' { value = @@`',`; }
		/ {_type = TT.Semicolon;}  ';' { value = @@`';`; }
		/ {_type = TT.LParen;}     '(' {_brackStack.Add(_type);}
		/ {_type = TT.RParen;}     ')' {if (_brackStack.Count > 1) _brackStack.Pop();}
		/ {_type = TT.LBrack;}     '[' {_brackStack.Add(_type);}
		/ {_type = TT.RBrack;}     ']' {if (_brackStack.Count > 1) _brackStack.Pop();}
		/ {_type = TT.LBrace;}     '{' {_brackStack.Add(_type);}
		/ {_type = TT.RBrace;}     '}' {if (_brackStack.Count > 1) _brackStack.Pop();}
		/ {_type = TT.At;}         '@' { value = @@`'@`; }
		/ {_type = TT.Keyword;}    value:Keyword
		/                          value:Operator
		/ error _ {_type = TT.Unknown;}
		)
		{	Debug.Assert(InputPosition > _startPosition);
			return new Token((int) _type, _startPosition, InputPosition - _startPosition, _style, value);
		};

	// Partial tokens used for syntax highlighting. An LES syntax highlighter
	// can record the token continued in each line (''', """ or /*) call one
	// of these rules to proces that token until it ends or the line ends.
		
	[LL(3)]
	[#new] public token TDQStringLine returns [bool result] :
		nongreedy(_)* (Newline(true) {return false;} | '"' '"' '"' {return true;});
	[LL(3)]
	[#new] public token TSQStringLine returns [bool result] :
		nongreedy(_)* (Newline(true) {return false;} | "'''" {return true;});
	[#new] public token MLCommentLine[ref int nested] returns [bool result] :
		(greedy
			( &{nested>0} "*/" {nested--;}
			/ "/*" {nested++;}
			/ ~('\r'|'\n'|'*')
			/ '*' (&!'/')
			))*
		(Newline(true) {return false;} | "*/" {return true;});

	}; // end LLLPG lexer
};
