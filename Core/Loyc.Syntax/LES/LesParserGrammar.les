/*
	Oh what fun, I'll finally get to compile a grammar using LLLPG!
	It's taken more than a year to get to this point, how exciting!!!

	OK, the goal: WRITE THE GRAMMAR OF LES IN LES.
*/
import macros LeMP.Prelude.Les;
import System;
import System.Collections.Generic;
import System.Linq;
import System.Text;
import Loyc;
import Loyc.Collections;
import Loyc.Syntax;
import Loyc.Syntax.Lexing;

namespace Loyc.Syntax.Les
:{
	using TT = TokenType;
	using S = CodeSymbols;
	using P = LesPrecedence;

	// 0162=Unreachable code detected; 0642=Possibly mistaken empty statement
	#rawText("#pragma warning disable 162, 642");

	public partial class LesParser
	{
		[FullLLk, AddCsLineDirectives(@false)]
		LLLPG parser(laType(TT), matchType(int), allowSwitch(@true));
		
		alias("@" = TT.At);
		alias(":" = TT.Colon);
		alias(";" = TT.Semicolon);
		alias("," = TT.Comma);
		alias("!" = TT.Not);
		alias("(" = TT.LParen);
		alias(")" = TT.RParen);
		alias("[" = TT.LBrack);
		alias("]" = TT.RBrack);
		alias("{" = TT.LBrace);
		alias("}" = TT.RBrace);
		
		// An Atom is:
		// - a literal or simple identifier
		//   - simple calls are also handled here, as a space optimization
		// - a token literal @[ ... ]
		// - a prefix operator followed by an Expr
		// - [Attributes] followed by an Atom
		// - an (expression) in parenthesis
		// - a { block } in braces
		private rule Atom(context::Precedence, ref attrs::RWList!LNode)::LNode @[
			{e::LNode = MissingExpr; _::LNode;}
			(	// identifier or identifier(call)
				t:=TT.Id
				(	&{[Local] t.EndIndex == LT($LI).StartIndex && context.CanParse(P.Primary)}
					p:="(" rp:=")"
					{e = ParseCall(t, p, rp.EndIndex);}
				/	{e = F.Id(t.Value -> Symbol, t.StartIndex, t.EndIndex);}
				)
			|	// literal
				t:=(TT.Number|TT.String|TT.SQString|TT.Symbol|TT.OtherLit) 
				{e = F.Literal(t.Value, t.StartIndex, t.EndIndex);}
			|	// @[Token literal]
				"@" t:="[" rb:="]"
				{e = F.Literal(t.Children, t.StartIndex, rb.EndIndex);}
			|	// Prefix operator (non-infix)
				t:=(TT.PrefixOp | TT.PreSufOp)
				e = Expr(PrefixPrecedenceOf(t), out _)
				{e = F.Call(t.Value -> Symbol, e, t.StartIndex, e.Range.EndIndex).SetBaseStyle(NodeStyle.Operator);}
			|	// colon indent
				":" t:=TT.Indent rb:=TT.Dedent greedy[":"]? 
				{e = ParseBraces(t, rb.EndIndex);}
			/	// Prefix operator (infix in other contexts)
				&{[Local] context != P.SuperExpr}
				t:=(TT.NormalOp|"!"|TT.BQString|TT.Dot|TT.Assignment)
				e=Expr(PrefixPrecedenceOf(t), out _) 
				{e = F.Call(t.Value -> Symbol, e, t.StartIndex, e.Range.EndIndex).SetBaseStyle(NodeStyle.Operator);}
			|	// [Attributes]
				t:="[" "]"
				{attrs = AppendExprsInside(t, attrs);}
				e=Atom(context, ref attrs)
			|	// (parens)
				t:="(" rp:=")" {e = ParseParens(t, rp.EndIndex);}
			|	// {braces}
				t:="{" rb:="}" {e = ParseBraces(t, rb.EndIndex);}
			|	error {
					e = F.Id(S.Missing, LT0.StartIndex, LT0.StartIndex);
					Error(0, "Expected an expression here");
				}
			)
			{return e;}
		];
			
		// Types of expressions:
		// - Atoms (includes attributes and prefix operators)
		// - infix + operators
		// - generic!arguments
		// - suffix_operators++
		// - method_calls(with arguments)
		// - indexers[with indexes]
		token Expr(context::Precedence, out primary::LNode)::LNode @[
			{e::LNode; _::LNode; prec::Precedence; attrs::RWList!LNode = @null;}
			e=Atom(context, ref attrs) 
			{primary = e;}
			greedy
			(	// Infix operator
				&{[Local] context.CanParse(prec=InfixPrecedenceOf(LT($LI)))}
				//{if (!context.CanParse(prec = InfixPrecedenceOf(LT(0)))) { goto end; };}
				t:=(TT.NormalOp|TT.BQString|TT.Dot|TT.Assignment|":")
				rhs:=Expr(prec, out primary)
				{e = F.Call(t.Value -> Symbol, e, rhs, e.Range.StartIndex, rhs.Range.EndIndex).SetBaseStyle(NodeStyle.Operator);}
				{if (!prec.CanParse(P.NullDot)) primary = e;}
			|	// ! operator (generics)
				&{[Local] context.CanParse(P.Primary)}
				"!"
				rhs:=Expr(P.Primary, out primary)
				{
					args::RVList!LNode;
					if (rhs.Calls(S.Tuple)) {
						args = (new RVList!LNode(e)).AddRange(rhs.Args);
					} else {
						i::int = rhs.Attrs.IndexWithName(S.TriviaInParens);
						if (i > -1) rhs = rhs.WithAttrs(rhs.Attrs.RemoveAt(i));
						args = (new RVList!LNode(e, rhs));
					};
					e = primary = F.Call(S.Of, args, e.Range.StartIndex, rhs.Range.EndIndex);
					e.BaseStyle = NodeStyle.Operator;
				}
			|	// Suffix operator
				&{[Local] context.CanParse(SuffixPrecedenceOf(LT($LI)))}
				t:=(TT.PreSufOp|TT.SuffixOp)
				{e = F.Call(ToSuffixOpName(t.Value -> Symbol), e, e.Range.StartIndex, t.EndIndex).SetBaseStyle(NodeStyle.Operator);}
				{if (t.Type() == TT.PreSufOp) primary = @null;} // disallow superexpression after suffix (prefix/suffix ambiguity)
			|	// call(function)
				&{[Local] e.Range.EndIndex == LT($LI).StartIndex && context.CanParse(P.Primary)}
				p:="(" rp:=")"
				{e = primary = ParseCall(e, p, rp.EndIndex);}
			|	// call @{ with brace syntax; }
				"@" p:="{" rp:="}"
				{e = primary = ParseCallBraces(e, p, rp.EndIndex);}
			|	// Indexer / square brackets
				&{[Local] context.CanParse(P.Primary)}
				t:="[" rb:="]"
				{
					var args = (new RWList!LNode { e });
					AppendExprsInside(t, args);
					e = primary = F.Call(S.Bracks, args.ToRVList(), e.Range.StartIndex, rb.EndIndex);
					e.BaseStyle = NodeStyle.Expression;
				}
			/	// Juxtaposition / superexpression
				// A loop is not strictly needed here; we could add each expr
				// one at a time, but that would be less efficient in the 
				// majority of cases.
				&{[Local] context.CanParse(P.SuperExpr)}
				{var rhs = RVList!LNode.Empty;}
				greedy(rhs += Expr(P.SuperExpr, out _))+
				{e = MakeSuperExpr(e, ref primary, rhs);}
			)*
			{return attrs == @null ? e : e.WithAttrs(attrs.ToRVList());}
		];
		
		// A superexpression is a sequence of expressions with no separator 
		// between them. The first expression is treated specially; e.g.
		// the super expression a+b c*d e=f, which consists of three
		// expressions a+b, c*d and e=f, is parsed (a + b(c * d, e = f)).
		protected rule SuperExpr()::LNode @[
			{_::LNode;}
			e:=Expr(StartStmt, out _)
			{return e;}
		];

		protected rule SuperExprOpt()::LNode @[
			(e:=SuperExpr {return e;} | {return MissingExpr;})
		];
		// A sequence of expressions separated by commas
		protected rule ExprList(ref exprs::RWList!LNode) @[
			{exprs = exprs ?? (new RWList!LNode());}
			(	exprs+=SuperExpr
				("," exprs+=SuperExprOpt)*
			|	{exprs.Add(MissingExpr);}
				("," exprs+=SuperExprOpt)+
			)?
		];

		token SuperExprOptUntil(terminator::TokenType)::LNode @[
			{var e::LNode = MissingExpr;}
			e=SuperExpr?
			{var error::bool = @false;}
			(	(";"|",") =>
				greedy(
					&{[Local] $LA!=terminator} 
					{	if (!error) {
							error = @true;
							Error(0, "Expected " + terminator.ToString());
						}
					}
					_ 
				)*
			)
			{return e;}
		];
		public rule StmtList(ref exprs::RWList!LNode) @[
			{exprs = exprs ?? new RWList!LNode();}
			next:=SuperExprOptUntil(TT.Semicolon)
			(	{exprs.Add(next);}
				";"
				next=SuperExprOptUntil(TT.Semicolon)
			)*
			{if (next != MissingExpr->object) exprs.Add(next);}
		];
	}
}
