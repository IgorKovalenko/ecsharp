using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Loyc
{
	/// <summary>This class provides the extension methods InRangeExcl() and 
	/// InRangeIncl() which facilitate the use of the "in" operator in Enhanced C#.
	/// </summary>
	/// <remarks>
	/// <ul>
	/// <li><c>n.InRangeIncl(lo, hi)</c> returns true if <c>n >= lo && hi > n</c>, 
	///     which corresponds to <c>n in lo..hi</c> in EC#.</li>
	/// <li><c>n.InRangeExcl(lo, hi)</c> returns true if <c>n >= lo && hi >= n</c>,
	///     which corresponds to <c>n in lo...hi</c> in EC#.</li>
	/// </ul>
	/// Note that if `in` and a range operator are not used together, something 
	/// slightly different happens:
	/// <ul>
	/// <li><c>var r = lo..hi</c> becomes Range.Excl(lo, hi)</c> (<c>Incl</c> for <c>...</c>.</li>
	/// <li><c>x in r</c> becomes <c>r.Contains(x)</c>.</li>
	/// </ul>
	/// </remarks>
	public static class In
	{
		unroll (Num in (int, uint, long, ulong, float, double))
		{
			public static bool IsInRangeExcl(this Num num, Num lo, Num hi) { 
				return num >= lo && num < hi;
			}
			public static bool IsInRangeIncl(this Num num, Num lo, Num hi) { 
				return num >= lo && num <= hi;
			}
			public static bool IsInRangeExcl(this Num num, Num hi) { 
				return num < hi;
			}
			public static bool IsInRangeIncl(this Num num, Num hi) { 
				return num <= hi;
			}
		}
		public static bool IsInRangeExcl<T>(this T num, T lo, T hi) where T: IComparable<T> { 
			return num.CompareTo(lo) >= 0 && num.CompareTo(hi) < 0;
		}
		public static bool IsInRangeIncl<T>(this T num, T lo, T hi) where T: IComparable<T> { 
			return num.CompareTo(lo) >= 0 && num.CompareTo(hi) <= 0;
		}
		public static bool IsInRangeExcl<T>(this T num, T hi) where T: IComparable<T> { 
			return num.CompareTo(hi) < 0;
		}
		public static bool IsInRangeIncl<T>(this T num, T hi) where T: IComparable<T> { 
			return num.CompareTo(hi) <= 0;
		}
	}
}