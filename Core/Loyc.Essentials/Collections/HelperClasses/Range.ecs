using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Loyc.Math;

namespace Loyc.Collections
{
	public partial class Range
	{
		unroll ((Num, M) in ((int, MathI), (uint, MathU), 
		                    (long, MathL), (ulong, MathUL),
							(float, MathF),(double,MathD),
							(FPI8, MathF8), (FPI16, MathF16)))
		{
			/// <summary>Returns a range from lo to hi that includes both lo and hi.</summary>
			public static NumRange<Num, M> Incl(Num lo, Num hi)
			{
				return new NumRange<Num, M>(lo, hi);
			}
			/// <summary>Returns a range from lo to hi that excludes hi by decreasing it by 1.</summary>
			public static NumRange<Num, M> Excl(Num lo, Num hi)
			{
				return new NumRange<Num, M>(lo, hi - 1);
			}
			/// <summary>Returns a range from lo to the MaxValue of the number type.</summary>
			public static NumRange<Num, M> Low(Num lo)
			{
				return new NumRange<Num, M>(lo, Num.MaxValue);
			}
			/// <summary>Returns the same range as Incl(num, num).</summary>
			public static NumRange<Num, M> Only(Num num)
			{
				return new NumRange<Num, M>(num, num);
			}
		}
		// Not sure if anyone wants this
		/*unroll ((Num, M) in ((uint, MathU), (ulong, MathUL)))
		{
			public static NumRange<Num, M> Incl(Num hi)
			{
				return new NumRange<Num, M>(0, hi);
			}
			public static NumRange<Num, M> Excl(Num hi)
			{
				return new NumRange<Num, M>(0, hi - 1);
			}
		}*/
	}
}
