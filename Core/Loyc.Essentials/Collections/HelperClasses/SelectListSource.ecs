#ecs;
using Loyc.Collections.Impl;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Loyc.Collections
{
	replace GenerateSelectClass($SelectList, $IList<T>)
	{
		public class $SelectList<T,TResult> : ListSourceBase<TResult>
		{
			protected $IList<T> _list;
			protected Func<T, TResult> _selector;

			public this($IList<T> list, Func<T,TResult> selector)
				{ _list = list; _selector = selector; }

			public $IList<T> OriginalList { get { return _list; } }
		
			new public TResult this[int index]
			{
				get { return _selector(_list[index]); }
			}

			public sealed override TResult TryGet(int index, out bool fail)
			{
				static if ($IList<T> `tree==` IListSource<T>) {
					T t = _list.TryGet(index, out fail);
					if (!fail)
						return _selector(t);
					else
						return default(TResult);
				} else {
					if (!(fail = ((uint)index >= (uint)_list.Count)))
						return _selector(_list[index]);
					else
						return default(TResult);
				}
			}

			public sealed override int Count
			{
				get { return _list.Count; }
			}
		}
	}
	
	/// <summary>
	/// Helper class: provides a modified view of an IList by transforming each element 
	/// on-demand. Objects of this type are returned from 
	/// <see cref="LinqToCollections.Select{T,TResult}(IList{T},Func{T,TResult})"/>
	/// </summary>
	/// <typeparam name="T">input type</typeparam>
	/// <typeparam name="TResult">output type</typeparam>
	GenerateSelectClass(SelectList, IList<T>);
	
	/// <summary>
	/// Helper class: provides a modified view of an IListSource by transforming each element 
	/// on-demand. Objects of this type are returned from 
	/// <see cref="LinqToCollections.Select{T,TResult}(IListSource{T},Func{T,TResult})"/>
	/// </summary>
	/// <typeparam name="T">input type</typeparam>
	/// <typeparam name="TResult">output type</typeparam>
	GenerateSelectClass(SelectListSource, IListSource<T>);
}
